package com.qf.plug.tool;

import java.awt.AWTException;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.MenuItem;
import java.awt.PopupMenu;
import java.awt.Rectangle;
import java.awt.SystemTray;
import java.awt.TrayIcon;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.TimeUnit;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.imageio.ImageIO;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.JTextField;

import org.apache.commons.io.FileUtils;
import org.apache.commons.lang.StringUtils;
import org.openqa.selenium.Alert;
import org.openqa.selenium.By;
import org.openqa.selenium.ElementNotVisibleException;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.Point;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebDriverException;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;

public class ToTrayIcon extends JFrame implements ActionListener, WindowListener {

	private static final long serialVersionUID = 1L;
	// Variables declaration - do not modify
	private javax.swing.JLabel L_img;
	private javax.swing.JLabel L_img2;
	private PopupMenu pop;
	private MenuItem open, close;
	private TrayIcon trayicon;
	private ProgressDialog dlgMain;
	private JSONObject pjson=new JSONObject();
	private Timer timer;

	// End of variables declaration

	/** Creates new form MainFrame */
	public ToTrayIcon() {
		setTitle("小助手");
		setLocation(300, 300);
		initComponents();
		addWindowListener(this);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {
		initFrame();
		// L_img = new javax.swing.JLabel(new
		// ImageIcon((MainFrame.class).getResource("com/topking/tray/images/netbean1.png")));
		// L_img2 = new javax.swing.JLabel(new
		// ImageIcon((MainFrame.class).getResource("com/topking/tray/images/netbean2.png")));
		L_img = new JLabel();
		L_img2 = new JLabel();

		pop = new PopupMenu();
		open = new MenuItem("主页面");
		open.addActionListener(this);

		close = new MenuItem("关闭");
		close.addActionListener(this);

		pop.add(open);
		pop.add(close);

		if (SystemTray.isSupported()) {
			SystemTray tray = SystemTray.getSystemTray();
			Image icon = getToolkit().getImage(getClass().getResource("/logo.png"));
			trayicon = new TrayIcon(icon, "小助手", pop);
			trayicon.addMouseListener(new MouseListener() {

				public void mouseClicked(MouseEvent e) {
					if (e.getClickCount() == 2) {
						if (getExtendedState() == JFrame.ICONIFIED) {
							openFrame();// 还原窗口
						} else {
							// 设置窗口状态(最小化至托盘)
							setExtendedState(JFrame.ICONIFIED);
						}
					}
				}

				public void mouseEntered(MouseEvent e) {

				}

				public void mouseExited(MouseEvent e) {

				}

				public void mousePressed(MouseEvent e) {

				}

				public void mouseReleased(MouseEvent e) {

				}

			});

			try {
				tray.add(trayicon);
			} catch (AWTException e) {
				e.printStackTrace();
			}
		}
		pack();
	}
	
    private void initPanel(){
    	initProperties();
    	JLabel un=new JLabel("账号:");
    	JTextField jun=new JTextField(10);
    	jun.setName("username");
    	jun.setText(pjson.getString("username"));
    	JLabel pw=new JLabel("密码:");
    	JPasswordField jpw=new JPasswordField(10);
    	jpw.setName("password");
    	jpw.setText(pjson.getString("password"));
    	JButton onset=new JButton("保存");
    	JButton reset=new JButton("重置");
    	JPanel contentPane = new JPanel();// 创建面板
    	contentPane.setLayout(new GridLayout(2,1));
    	JPanel pl=new JPanel();
    	pl.setLayout(new GridLayout(7,2));
    	pl.add(un);
    	pl.add(jun);
    	pl.add(pw);
    	pl.add(jpw);
    	
    	JLabel tm=new JLabel("时间:");
    	JTextField jtm=new JTextField(10);
    	jtm.setName("time");
    	jtm.setText(pjson.getString("time"));
    	pl.add(tm);
    	pl.add(jtm);
    	
    	JLabel wd=new JLabel("浏览器:");
    	JTextField jwd=new JTextField(10);
    	jwd.setName("webdriver");
    	jwd.setText(pjson.getString("webdriver"));
    	pl.add(wd);
    	pl.add(jwd);
    	
    	JLabel dr=new JLabel("驱动:");
    	JTextField jdr=new JTextField(10);
    	jdr.setName("driver");
    	jdr.setText(pjson.getString("driver"));
    	pl.add(dr);
    	pl.add(jdr);
    	
    	JLabel drp=new JLabel("驱动位置:");
    	JTextField jdrp=new JTextField(10);
    	jdrp.setName("driverPath");
    	jdrp.setText(pjson.getString("driverPath"));
    	pl.add(drp);
    	pl.add(jdrp);
    	
    	JLabel ocr=new JLabel("Tesseract-OCR:");
    	JTextField jocr=new JTextField(10);
    	jocr.setName("ocr");
    	jocr.setText(pjson.getString("ocr"));
    	pl.add(ocr);
    	pl.add(jocr);
    	contentPane.add(pl);
    	
    	JPanel buttonPanel = new JPanel();
    	buttonPanel.add(onset);
    	buttonPanel.add(reset);
    	contentPane.add(buttonPanel);
    	
    	reset.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				reset(e);
			}
		});
    	onset.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				onset(e);
			}
		});
    	
    	setContentPane(contentPane);// 应用面板
    }
    
    private void initProperties(){
    	try{
    		String path=realPath();
        	String str=readFile(path+"properties");
        	if(StringUtils.isNotEmpty(str)){
        		pjson=JSONObject.parseObject(str);
        	}
    	}catch(Exception e){
    		e.printStackTrace();
    	}
    }
    
	public void writeFile(String filePath, String str) {
		BufferedWriter out = null;
		FileWriter fw = null;
		try {
			File file = new File(filePath);
			if (!file.exists())
				file.createNewFile();
			fw = new FileWriter(filePath);
			out = new BufferedWriter(fw);
			out.write(str);
		} catch (Exception e) {

		} finally {
			try {
				out.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}

	public String readFile(String path) {
		File file = new File(path);
		if (!file.exists() || file.isDirectory())
			return null;
		FileReader fr = null;
		try {
			fr = new FileReader(file);
			BufferedReader br = new BufferedReader(fr);
			String temp = null;
			StringBuffer sb = new StringBuffer();
			temp = br.readLine();
			while (temp != null) {
				sb.append(temp + " ");
				temp = br.readLine();
			}
			return sb.toString();
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		} finally {
			try {
				fr.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}
    
    private void onset(ActionEvent ae){
    	try{
    		JButton button=(JButton) ae.getSource();
        	JPanel panel=(JPanel) button.getParent().getParent().getComponents()[0];
        	 for(Component component: panel.getComponents()){   
                 if(component instanceof JTextField) {   
                	 pjson.put(((JTextField) component).getName(), ((JTextField) component).getText());
                 }   
        	 }
        	 String path=realPath();
         	writeFile(path+"properties",pjson.toJSONString());
        	timerStart();
    	}catch(Exception e){
    		
    	}
    }
    
    public void timerStart() {  
        Calendar calendar = Calendar.getInstance();  
        String jt=pjson.getString("time");
        if(StringUtils.isNotEmpty(jt)){
        	try{
        		String[] jts=jt.split(":");
        		if(jts.length>0){
        			calendar.set(Calendar.HOUR_OF_DAY, Integer.parseInt(jts[0])); // 控制时  
        		}
        		if(jts.length>1){
        			calendar.set(Calendar.MINUTE, Integer.parseInt(jts[1]));       // 控制分  
        		}
        		if(jts.length>2){
        			calendar.set(Calendar.SECOND, Integer.parseInt(jts[2]));       // 控制秒
        		}
        	}catch(Exception e){
        		e.printStackTrace();
        	}
        }
        Date time = calendar.getTime();
        timer = new Timer();  
        timer.scheduleAtFixedRate(new TimerTask() {  
            public void run() {  
            	planTest(); 
            }  
        }, time, 1000 * 60 * 60 * 24);// 这里设定将延时每天固定执行  
    } 
    
    private void planTest(){
    	String jsonStr=readFile(realPath()+"plan");
    	JSONObject json=JSONObject.parseObject(jsonStr);
    	System.setProperty(pjson.getString("driver"), pjson.getString("driverPath"));
    	WebDriver driver =null;
    	if("ChromeDriver".equals(pjson.getString("webdriver"))){
    		driver=new ChromeDriver();
    	}
    	driver.get(json.getString("url"));
    	driver.manage().timeouts().implicitlyWait(2, TimeUnit.SECONDS);
    	driver.findElement(By.id(json.getString("username"))).sendKeys(pjson.getString("username"));
    	driver.findElement(By.id(json.getString("password"))).sendKeys(pjson.getString("password"));
    	userLogin(driver, json);
    	JSONArray arr=json.getJSONArray("oper");
        for(Object obj:arr){
        	json=(JSONObject) obj;
        	findElement(driver, json.getString("eletype"), json.getString("element"),json.getString("oper"),Integer.parseInt(json.getString("time")),json.get("sleep"));
        }
    }
    /**
     * 登录，如果登录失败则重新登录
     * @Title userLogin 
     * @Description TODO
     * @param driver
     * @param json
     * @return void
     */
    private void userLogin(WebDriver driver,JSONObject json){
    	if(StringUtils.isNotEmpty(json.getString("image"))){
    		String imageText=findImage(driver, json);
            driver.findElement(By.id(json.getString("captcha"))).sendKeys(imageText);
    	}
    	findElement(driver, json.getString("eletype"), json.getString("element"),"click",Integer.parseInt(json.getString("time")),json.get("sleep"));
		try {
			Thread.sleep(5000);
			Alert al = driver.switchTo().alert();
			if (al != null) {
				al.accept();
				userLogin(driver, json);
			}
		} catch (Exception e) {
			System.err.println(e.getMessage());
		}
    }
    
    /**
     * 获取控件，并操作该控件，如果获取失败则等待两秒后重试
     * @Title findElement 
     * @Description TODO
     * @param driver
     * @param eletype
     * @param element
     * @param oper
     * @return void
     */
    private void findElement(WebDriver driver,String eletype,String element,String oper,int time,Object sleep){
    	WebElement webElement=null;
    	if(sleep!=null){
    		try {
				Thread.sleep(Long.parseLong(sleep.toString()));
			} catch (Exception e) {
				e.printStackTrace();
			}
    	}
    	driver.manage().timeouts().implicitlyWait(time, TimeUnit.SECONDS);
    	if("id".equals(eletype)){
    		webElement= driver.findElement(By.id(element));
    	}else if("name".equals(eletype)){
    		webElement= driver.findElement(By.name(element));
    	}else if("class".equals(eletype)){
    		webElement= driver.findElement(By.className(element));
    	}else if("classs".equals(eletype)){
    		webElement= driver.findElements(By.className(element)).get(0);
    	}else if("cssSelector".equals(eletype)){
    		webElement= driver.findElement(By.cssSelector(element));
    	}else if("script".equals(eletype)){
    		((JavascriptExecutor) driver).executeScript(element);
    		return;
    	}else if("classall".equals(eletype)){
    		List<WebElement> wes= driver.findElements(By.className(element));
    		for(WebElement we:wes){
    			try{
    				if("click".equals(oper)){
            			we.click();
            		}else if("clear".equals(oper)){
            			we.clear();
            		}else{
            			we.sendKeys(oper);
            		}
    			}catch(Exception e){
    				System.out.println(e.getMessage());
    			}
    		}
    		return;
    	}else if("xpath".equals(eletype)){
    		webElement= driver.findElement(By.xpath(element));
    	}else if("frame".equals(eletype)){
    		if("defaultContent".equals(element)){
    			driver.switchTo().defaultContent();
    		}else{
    			driver.switchTo().frame(element);
    		}
    		return;
    	}
    	try{
    		if("click".equals(oper)){
    			webElement.click();
    		}else if("clear".equals(oper)){
    			webElement.clear();
    		}else{
    			webElement.sendKeys(oper);
    		}
    	}catch(ElementNotVisibleException e){
    		findElement(driver, eletype, element, oper,2,sleep);
    	}catch(WebDriverException we){
    		findElement(driver, eletype, element, oper,2,sleep);
    	}
    }
    /**
     * 获取验证码图片，如果图片获取失败则重新获取
     * @Title findImage 
     * @Description TODO
     * @param driver
     * @param image
     * @param errorType
     * @return
     * @return String
     */
    private String findImage(WebDriver driver,JSONObject json){
    	String realPath=realPath();
    	String img=realPath+"image.jpg";
    	WebElement element=driver.findElement(By.id(json.getString("image")));
		try {
			screenShotForElement(driver,element,img);
			ClearImageHelper.cleanImage(new File(img), realPath);
		} catch (Exception e) {
			e.printStackTrace();
		}
		Runtime rt = Runtime.getRuntime();
        try {
			rt.exec("cmd.exe /C  "+pjson.getString("ocr")+" "+img+"  "+realPath+"image -1 ");
			Thread.sleep(1000);
		} catch (Exception e) {
			e.printStackTrace();
		}
        String sign=readFile(realPath+"image.txt");
        new File(img).delete();
        new File(realPath+"image.txt").delete();
        if(StringUtils.isNotEmpty(sign)){
        	sign= sign.replace(" ", "");
        }
        if(StringUtils.isEmpty(sign)){
        	driver.get(json.getString("url"));
        	driver.manage().timeouts().implicitlyWait(2, TimeUnit.SECONDS);
        	driver.findElement(By.id(json.getString("username"))).sendKeys(pjson.getString("username"));
        	driver.findElement(By.id(json.getString("password"))).sendKeys(pjson.getString("password"));
        	try {
				Thread.sleep(2000);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
        	return findImage(driver, json);
		} else {
			String regEx = "[`~!@#$%^&*()+=|{}':;',\\[\\].<>/?~！@#￥%……&*（）——+|{}【】‘；：”“’。，、？]";
			Pattern p = Pattern.compile(regEx);
			Matcher m = p.matcher(sign);
			return m.replaceAll("").trim();
		}
    }
    
    private void reset(ActionEvent ae){
    	try{
    		JButton button=(JButton) ae.getSource();
        	JPanel panel=(JPanel) button.getParent().getParent().getComponents()[0];
        	 for(Component component: panel.getComponents()){   
                 if(component instanceof JTextField) {   
                         ((JTextField) component).setText("");   
                 }   
        	 }
    	}catch(Exception e){
    		e.printStackTrace();
    	}
    }
    
    private void screenShotForElement(WebDriver driver,WebElement element, String path) throws InterruptedException {
        File scrFile = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);
        try {
            Point p = element.getLocation();
            int width = element.getSize().getWidth();
            int height = element.getSize().getHeight();
            Rectangle rect = new Rectangle(width, height);
            BufferedImage img = ImageIO.read(scrFile);
            BufferedImage dest = img.getSubimage(p.getX(), p.getY(),
                    rect.width, rect.height);
            ImageIO.write(dest, "png", scrFile);
            Thread.sleep(1000);
            FileUtils.copyFile(scrFile, new File(path));
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

	/**
	 * @param args
	 *            the command line arguments
	 */
	public static void main(String args[]) {
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new ToTrayIcon().setVisible(true);
			}
		});
	}

	public void actionPerformed(ActionEvent e) {
		if (e.getSource() == open) {
			openFrame();
		}
		if (e.getSource() == close) {
			System.exit(-1);
		}
	}

	public void openFrame() {
		setVisible(true);// 设置为可见
		setAlwaysOnTop(true);// 设置置顶
		// 设置窗口状态(在最小化状态弹出显示)
		setExtendedState(JFrame.NORMAL);
	}

	public void windowActivated(WindowEvent arg0) {

	}

	public void windowClosed(WindowEvent arg0) {
		dispose();
	}

	public void windowClosing(WindowEvent arg0) {

	}

	public void windowDeactivated(WindowEvent arg0) {

	}

	public void windowDeiconified(WindowEvent arg0) {

	}

	// 窗口最小化
	public void windowIconified(WindowEvent arg0) {
		setVisible(false);// 设置为不可见
	}

	public void windowOpened(WindowEvent arg0) {

	}

	private void initFrame() {
		this.setPreferredSize(new Dimension(300, 500));
		Image image = null;
		try {
			image = ImageIO.read(this.getClass().getResource("/logo.png"));
		} catch (IOException e1) {
		}
		this.setIconImage(image);
		JMenuBar menuBar = new JMenuBar(); // 创建菜单栏对象.
		setJMenuBar(menuBar); // 将菜单栏对象添加到窗口的菜单栏中.
		

		// 创建菜单对象及名称.
		JMenu menu = new JMenu("菜单");
		menuBar.add(menu); // 将菜单对象添加到菜单栏对象中.

		// 创建子菜单及名称.
		JMenuItem menuItem = new JMenuItem("设置");
		// 添加监听事件.
		// menuItem.addActionListener(new ItemListener());
		menu.add(menuItem);// 将子菜单添加到主菜单中.

		// 创建第二个子菜单及名称.
		JMenu secItem = new JMenu("文件");
		menu.add(secItem);
		// 创建此菜单的子菜单及名称.
		JMenuItem secMenuItem = new JMenuItem("文件列表");
		secMenuItem.addActionListener(new ItemListener());
		secItem.add(secMenuItem);// 将子菜单添加到菜单2下.
		JMenuItem exitItem = new JMenuItem("退出");
		exitItem.addActionListener(new ItemListener());
		menu.add(exitItem);
		dlgMain = new ProgressDialog(20);
		initPanel();
	}

	// 写类,即添加ActionListener监听器,捕获菜单项单击事件.
	private class ItemListener implements ActionListener {
		public void actionPerformed(ActionEvent e) {
			JMenuItem menuItem = (JMenuItem) e.getSource();// 获得触发此次事件的菜单项.
			if("文件列表".equals(menuItem.getText())){
				ProcessThread pt=new ProcessThread(dlgMain);
				pt.start();
			}else if("退出".equals(menuItem.getText())){
				System.exit(-1);
			}
		}
	}
	
	private String realPath(){
		try{
			return this.getClass().getResource("/").getPath().substring(1);
//			return this.getClass().getResource("/").getPath().substring(1)+"app/";
		}catch(Exception e){
			String path = this.getClass().getProtectionDomain().getCodeSource().getLocation().getPath();  
	        try{  
	            path = java.net.URLDecoder.decode(path, "UTF-8");//转换处理中文及空格  
	        }catch (java.io.UnsupportedEncodingException e1){  
	            return null;  
	        }  
	        File f=new File(path);
	        return f.getParent()+"/";
		}
	}
}